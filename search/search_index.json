{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AIEC_Object_Detection AI Enigma Contest task on real time complex object detection Algorithms planned to be implemented Click to expand - [x] Faster R-CNN - [x] R-FCN - [x] SSD Project Structure COCOFasterR-CNN complexObjectDetection |--- output |--- scripts |--- src | |--- coco.names | |--- detector.py | |--- main.py |--- test |--- env.yml Directory Details output : This directory is for keeping the detected new images. Used by the createBoundingBox method in detector.py file trained_model : After testing against Faster and Mask R-CNN, finally,Faster R-CNN which is generated by the downloader from TF Object Detection Model Zoo scripts : A directory created & defined by the developers to keep useful scripts for making the developement of this project as seamless as possible src : Holds the python codes test : It is used to store the existing and real time complex image and videos which are used by the main.py file for training the model. Environment Setup The project environment is managed by conda . Details are given below: OS Platform: Linux 6.5.5-arch1-1 Python Version: Python 3.9.0 PIP Version: pip 23.2.1 Conda Version: conda 23.7.4 Tensorflow Version: tensorflow-gpu 2.6.0 Cuda Toolkit Version: cudatoolkit 11.2.2 CUDNN Version: 8.1 The above mentioned python packages version matching is an important part. It must be noticed that if the libraries versions are matching or not. There are two ways to make the developement environment ready: Automatic - Using the YML file I have created an env.yml file using conda so that it becomes easier to install the developement libraries in one command. Use this command to install all the required libraries with specific versions. Note that conda must be installed first conda env create -f env.yml Manual Every packages can be installed manually. The advantage of installing manually is that we get more control and it gets easier to solve errors and also find errors. Create the virtual environment first conda env create --name tf_gpu python 3.9 conda activate tf_gpu Install the libraries conda install cudatoolkit=11.2 cudnn=8.1 -c=conda-forge pip install tensorflow-gpu==2.6 pip install opencv-python Running the project We have made running the project much easier Activate the conda virtual environment first conda activate tf_gpu Go to the src directory cd src Run the main file python main.py Command Line Arguments We have added some CLA to out project so that we don't need to change in code when we want to run in different modes of our project. For example, currently we have a --camera argument which will activate the live detection using the webcam python main.py --camera Currently supported CLA are: --help Print the built in help menu for this program --camera Enable the live detection using camera Performance Analysis Meta Architecture (Accuracy and Speed) Meta Architecture (Object Resolution) Meta Architecture (Feature Extractor) Architecture (Proposals Count) References COCO Dataset TF Object Detection Model Zoo Authors","title":"Home"},{"location":"#aiec_object_detection","text":"AI Enigma Contest task on real time complex object detection","title":"AIEC_Object_Detection"},{"location":"#algorithms-planned-to-be-implemented","text":"Click to expand - [x] Faster R-CNN - [x] R-FCN - [x] SSD","title":"Algorithms planned to be implemented"},{"location":"#project-structure","text":"","title":"Project Structure"},{"location":"#cocofasterr-cnn","text":"complexObjectDetection |--- output |--- scripts |--- src | |--- coco.names | |--- detector.py | |--- main.py |--- test |--- env.yml","title":"COCOFasterR-CNN"},{"location":"#directory-details","text":"output : This directory is for keeping the detected new images. Used by the createBoundingBox method in detector.py file trained_model : After testing against Faster and Mask R-CNN, finally,Faster R-CNN which is generated by the downloader from TF Object Detection Model Zoo scripts : A directory created & defined by the developers to keep useful scripts for making the developement of this project as seamless as possible src : Holds the python codes test : It is used to store the existing and real time complex image and videos which are used by the main.py file for training the model.","title":"Directory Details"},{"location":"#environment-setup","text":"The project environment is managed by conda . Details are given below: OS Platform: Linux 6.5.5-arch1-1 Python Version: Python 3.9.0 PIP Version: pip 23.2.1 Conda Version: conda 23.7.4 Tensorflow Version: tensorflow-gpu 2.6.0 Cuda Toolkit Version: cudatoolkit 11.2.2 CUDNN Version: 8.1 The above mentioned python packages version matching is an important part. It must be noticed that if the libraries versions are matching or not. There are two ways to make the developement environment ready:","title":"Environment Setup"},{"location":"#automatic-using-the-yml-file","text":"I have created an env.yml file using conda so that it becomes easier to install the developement libraries in one command. Use this command to install all the required libraries with specific versions. Note that conda must be installed first conda env create -f env.yml","title":"Automatic - Using the YML file"},{"location":"#manual","text":"Every packages can be installed manually. The advantage of installing manually is that we get more control and it gets easier to solve errors and also find errors. Create the virtual environment first conda env create --name tf_gpu python 3.9 conda activate tf_gpu Install the libraries conda install cudatoolkit=11.2 cudnn=8.1 -c=conda-forge pip install tensorflow-gpu==2.6 pip install opencv-python","title":"Manual"},{"location":"#running-the-project","text":"We have made running the project much easier Activate the conda virtual environment first conda activate tf_gpu Go to the src directory cd src Run the main file python main.py","title":"Running the project"},{"location":"#command-line-arguments","text":"We have added some CLA to out project so that we don't need to change in code when we want to run in different modes of our project. For example, currently we have a --camera argument which will activate the live detection using the webcam python main.py --camera Currently supported CLA are: --help Print the built in help menu for this program --camera Enable the live detection using camera","title":"Command Line Arguments"},{"location":"#performance-analysis","text":"","title":"Performance Analysis"},{"location":"#meta-architecture-accuracy-and-speed","text":"","title":"Meta Architecture (Accuracy and Speed)"},{"location":"#meta-architecture-object-resolution","text":"","title":"Meta Architecture (Object Resolution)"},{"location":"#meta-architecture-feature-extractor","text":"","title":"Meta Architecture (Feature Extractor)"},{"location":"#architecture-proposals-count","text":"","title":"Architecture (Proposals Count)"},{"location":"#references","text":"COCO Dataset TF Object Detection Model Zoo","title":"References"},{"location":"#authors","text":"","title":"Authors"}]}